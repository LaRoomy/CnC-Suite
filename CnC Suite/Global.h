#pragma once

// own messages:
#define		WM_NORMALIZE				WM_USER + 10	// WPARAM == MENU ID ; LPARAM == NOT USED ; RETURN VALUE -> TRUE IF SUCCESSFUL - FALSE OTHERWISE
#define		WM_GETUIINSTANCE			WM_USER	+ 11	// WPARAM == NOT USED; LPARAM == NOT USED ; RETURNS A POINTER TO THE INTERFACE CLASS IF SUCCESSFUL - NULL OTHERWISE
#define		WM_FRAMECHANGED				WM_USER + 12	// WPARAM == NOT USED; LPARAM == POINTER TO A CUSTOM_FRAME_SIZE STRUCTURE (LPCSTMFRAME) ; RETURN VALUE -> TRUE IF SUCCESSFUL - FALSE OTHERWISE
#define		WM_GETAPPLICATIONDATA		WM_USER + 13	// WPARAM == NOT USED; LPARAM == POINTER TO AN APPLICATION_DATA STRUCTURE ; RETURN VALUE -> BOOL : TRUE IF SUCCESSFUL - FALSE OTHERWISE
#define		WM_CLEANUP					WM_USER + 14	// WPARAM == TYPE TO DELETE; LPARAM == POINTER TO CLASS; RETURN VALUE -> IGNORED
#define		WM_HANDLESEARCHRESULT		WM_USER + 15	// WPARAM == NOT USED; LPARAM == POINTER TO AN OPENRESULT STRUCTURE; RETURN VALUE -> IGNORED
#define		WM_ADDNEWTAB				WM_USER + 16	// WPARAM == NOT USED; LPARAM == POINTER TO A PATH TO OPEN; RETURN VALUE -> IGNORED
#define		WM_DISPLAYERROR				WM_USER + 17	// WPARAM == NOT USED; LPARAM == POINTER TO AN EDSPSTRUCT STRUCTURE; RETURN VALUE -> BOOL : TRUE IF SUCCESSFUL - FALSE OTHERWISE
#define		WM_GETSTYLEINFO				WM_USER + 18	// WPARAM == NOT USED; LPARAM == POINTER TO AN APPSTYLEINFO STRUCTURE; RETURN VALUE -> BOOL : TRUE IF SUCCESSFUL - FALSE OTHERWISE
#define		WM_SETAPPSTYLE				WM_USER + 19	// WPARAM == NOT USED; LPARAM == POINTER TO AN APPSTYLEINFO STRUCTURE; RETURN VALUE -> BOOL : TRUE IF SUCCESSFUL - FALSE OTHERWISE
#define		WM_VALIDATEERROR			WM_USER + 20	// WPARAM == NOT USED; LPARAM == POINTER TO AN EDSPSTRUCT STRUCTURE; RETURN VALUE -> BOOL : TRUE - ERROR IS VALID : FALSE - ERROR NOT VALID ANYMORE(WILL BE DELETED)
#define		WM_UPDATESTATUSBAR			WM_USER + 21	// WPARAM == NOT USED; LPARAM == POINTER TO A STBUPDATE STRUCTURE
#define		WM_GETABSEDITPOS			WM_USER + 22	// WPARAM == NOT USED; LPARAM == POINTER TO A RECT STRUCTURE
#define		WM_EXPANDING				WM_USER + 23	// WPARAM == NOT USED; LPARAM == NOT USED
#define		WM_PRINTMESSAGE				WM_USER + 24	// WPARAM == COLORREF VALUE (TEXTCOLOR); LPARAM == POINTER TO TEXTBUFFER; RETURN VALUE -> IGNORED
#define		WM_SYNCROPRINT				WM_USER + 25	// ??? data-exchange internal - only used for serial-exchange
#define		WM_INTERRUPT				WM_USER + 26	// ??? data-exchange internal - only used for serial-exchange
#define		WM_TRANSMISSIONCOMPLETE		WM_USER + 27	// WPARAM == NOT USED; LPARAM == POINTER TO A BUFFER CONTAINING THE RECEIVED TEXT; RETURN VALUE -> IGNORED
#define		WM_GETWNDINSTANCE			WM_USER + 28	// WPARAM == NOT USED; LPARAM == NOT USED; RETURN VALUE -> HANDLE TO THE REQUESTED INSTANCE (- nullptr if failed!)
#define		WM_GETTABCTRLPROPERTY		WM_USER + 29	// WPARAM == NOT USED; LPARAM == POINTER TO A TCPROPERTY-STRUCTURE; RETURN VALUE -> IGNORED
#define		WM_GETCURRENTSELECTION		WM_USER + 30	// WPARAM == NOT USED; LPARAM == POINTER TO A SELECTIONINFO STRUCTURE; RETURN VALUE -> IGNORED
#define		WM_DISPATCHTEXT				WM_USER + 31	// WPARAM == NOT USED; LPARAM == POINTER TO A DISPATCHTEXT-STRUCTURE; RETURN VALUE -> IGNORED
#define		WM_ANIMATE					WM_USER + 32	// WPARAM == NOT USED; LPARAM == POINTER TO AN ANIMATEINFO STRUCTURE
#define		WM_GETDESCRIPTIONS			WM_USER + 33	// WPARAM == NOT USED; LPARAM == POINTER TO A DESCRIPTIONINFO STRUCTURE; RETURN VALUE -> TRUE == DESCRIPTION EXISTS -> FALSE OTHERWISE
#define		WM_SETDESCRIPTIONS			WM_USER + 34	// WPARAM == NOT USED; LPARAM == POINTER TO A DESCRIPTIONINFO STRUCTURE;
#define		WM_GETEDITCONTROLPROPERIES	WM_USER + 35	// WPARAM == POINTER TO EDITSTYLECOLORS STRUCTURE; LPARAM == POINTER TO EDITCONTROLPROPERTIES STRUCTURE; RETURN VALUE ignored
#define		WM_UPDATEEDITCOLORS			WM_USER + 36	// WPARAM == (BOOL) TRUE IF COLORS ARE USERDEFINED, FALSE OTHERWISE; LPARAM == NOT USED; RETURN VALUE IGNORED
#define		WM_INTERNALCOMMAND			WM_USER + 37	// WPARAM == ((LOWORD = COMMAND)(HIWORD = COMMAND SPECIFIC)); LPARAM == COMMAND SPECIFIC; RETURN VALUE IGNORED
#define		WM_FINISHNOTIFY				WM_USER + 38	// WPARAM == ID OF FINISHED COMMAND; LPARAM == COMMAND SPECIFIC
#define		WM_PROCESSNEWINSTANCE		WM_USER + 39	// WPARAM == NOT USED; LPARAM == NOT USED
#define		WM_BLOCKINPUT				WM_USER + 40	// WPARAM == TRUE/FALSE (BLOCK/DONOT BLOCK); LPARAM == NOT USED
#define		WM_RESTARTAPPLICATION		WM_USER + 41	// WPARAM == RESTARTOPTION; LPARAM == NOT USED
#define		WM_UPDATETABMSCVALUES		WM_USER + 42	// WPARAM == NOT USED; LPARAM == NOT USED

// internal commands (max 16bit)
#define		ICOMMAND_AUTOCOMPLETE_DATA_CHANGED		0x01
#define		ICOMMAND_SETOUTPUT_STRING				0x02	// LPARAM == LPTSTR to string
#define		ICOMMAND_WORKERCOMPLETE					0x04	// == WPARAM (NOT LOWORD)
#define		ICOMMAND_AUTOSYNTAX_DATA_CHANGED		0x08
#define		ICOMMAND_PROPERTYWINDOW_CLOSED			0x10
#define		ICOMMAND_SETCANCLOSE					0x20	// WPARAM(HIWORD!!!) == (BOOL)((TRUE / FALSE))
//#define		ICOMMAND_TVITEMMOVED					0x40	// LPARAM -> POINTER TO A FILEOPERATION STRUCTURE (p1 == source / p2 == target)
#define		ICOMMAND_TVREFRESH						0x80
#define		ICOMMAND_TVRECOVERSCROLL				0x100
#define		ICOMMAND_EXPANDPATHTOFILE				0x200	// LPARAM -> POINTER TO PATH (LPCTSTR)
#define		ICOMMAND_GETEXITCONDITION				0x400	// return-value (BOOL): exitcondition == TRUE
#define		ICOMMAND_AUTOSYNTAXMANGER_CLOSED		0x800
#define		ICOMMAND_AUTOCOMPLETEMANAGER_CLOSED		0x1000
#define		ICOMMAND_FOCUSRECTOFFSET_CHANGED		0x2000
#define		ICOMMAND_ACTIVATE_FSW_BLOCKER			0x4000	// LPARAM -> TRUE or FALSE (activate or deactivate the blocker)

// style IDs
#define		STYLEID_BLACK				6
#define		STYLEID_DARKGRAY			7
#define		STYLEID_LIGHTGRAY			8
#define		STYLEID_GREEN				9

// timer IDs
#define		ID_TIMER_UPDATESEARCH		100
#define		ID_TIMER_VALIDATEERROR		101
#define		ID_TIMER_SAVEFRAMEDATA		102
#define		ID_TIMER_AUTOSAVE			103
#define		ID_TIMER_SESSIONSAVE		104

// text-dispatch mode
#define		DT_INSERT					1
#define		DT_SETTEXT					2

// text-dispatch destination
#define		DT_DESTINATION_TABCONTROL	10

// working indicator animation modes
#define		ANIMATE_DIRECTION_UP		0x01
#define		ANIMATE_DIRECTION_DOWN		0x02
#define		ANIMATE_CIRCLE				0x04
#define		ANIMATE_CIRCLE_Q1			0x08
#define		ANIMATE_CIRCLE_Q2			0x10
#define		ANIMATE_CIRCLE_Q3			0x20
#define		ANIMATE_CIRCLE_Q4			0x40

// cross section open flags
#define		DO_NOT_SET_FOCUS			0x01
#define		FORCE_OPEN_IN_NEW_TAB		0x02

// filetypes for the FILEOPERATIONINFO-STRUCTURE
#define		FOI_TYPE_FILE				1
#define		FOI_TYPE_FOLDER				2


// creators

// create a font with default values (height, weight, fontname)
#define		_CREATE_FONT(h,w,f)			(HFONT)(CreateFont(((int)(h)), 0, 0, 0, ((int)(w)), FALSE, FALSE, FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, FF_DONTCARE, ((LPCTSTR)(f))))


typedef struct _WNDSIZE_DATA {

	BOOL valid;
	int TVFrame_width;
	int EditFrameHeight;
	int nCmdShow;
	RECT rc_Window;

}WNDSIZE_DATA,*LPWNDSIZE_DATA;

typedef struct _DESCRIPTIONINFO{
	TCHAR* desc1;
	TCHAR* desc2;
	TCHAR* desc3;
}DESCRIPTIONINFO, *LPDESCRIPTIONINFO;

typedef struct _APPLICATION_DATA{

	BOOL AppStartedWithCmdLine;
	TCHAR* CmdLine;
	TCHAR* UserPath;
	WNDSIZE_DATA WndSizeData;
	BOOL IsFirstUse;

}APPLICATION_DATA,*LPAPPLICATION_DATA;

typedef struct _APPSTYLEINFO {

	int StyleID;
	COLORREF Stylecolor;
	COLORREF Background;
	COLORREF SizeWndColor;
	COLORREF TextColor;
	COLORREF OutlineColor;
	COLORREF TabColor;
	COLORREF ToolbarbuttonBkgnd;
	COLORREF MenuPopUpColor;
	COLORREF specialTextcolor;
	COLORREF titlebarColor;
	COLORREF mainToolbarColor;

	_APPSTYLEINFO& operator=(const _APPSTYLEINFO& asi)
	{
		this->StyleID = asi.StyleID;
		this->Stylecolor = asi.Stylecolor;
		this->Background = asi.Background;
		this->SizeWndColor = asi.SizeWndColor;
		this->TextColor = asi.TextColor;
		this->OutlineColor = asi.OutlineColor;
		this->TabColor = asi.TabColor;
		this->ToolbarbuttonBkgnd = asi.ToolbarbuttonBkgnd;
		this->MenuPopUpColor = asi.MenuPopUpColor;
		this->specialTextcolor = asi.specialTextcolor;
		this->titlebarColor = asi.titlebarColor;
		this->mainToolbarColor = asi.mainToolbarColor;
		return *this;
	}

}APPSTYLEINFO, *LPAPPSTYLEINFO;

typedef struct _SPECIALCOLORSTRUCT {

	COLORREF normal;
	COLORREF selected;
	COLORREF pressed;
	COLORREF highlighted;
	COLORREF accent_norm;
	COLORREF text;
	COLORREF accent_text;
	COLORREF outline;

}SPECIALCOLORSTRUCT, *LPSPECIALCOLORSTRUCT;

typedef struct _STBUPDATE {

	int part;
	TCHAR text[256];
	DWORD action;

}STBUPDATE, *LPSTBUPDATE;

typedef struct _SELECTIONINFO {
	BOOL success;
	TCHAR* selContent;
	CHARRANGE cr;
	int numChars;
}SELECTIONINFO, *LPSELECTIONINFO;

typedef struct _DISPATCHTEXT {

	HWND from;
	int destination;
	LPTSTR text;
	int mode;

}DISPATCHTEXT, *LPDISPATCHTEXT;

typedef struct _ASUBINFO {
	DWORD animateInfo;
	POINT aPt;
	BOOL started;
}ASUBINFO, *LPASUBINFO;

typedef struct _ANIMATEINFO {

	DWORD animateInfo;
	POINT aPt;
	SIZE aSz;
	int numMover;
	LPASUBINFO precedingMover;

}ANIMATEINFO, *LPANIMATEINFO;

typedef struct _FILEOPERATIONINFO {

	TCHAR* p1;
	TCHAR* p2;
	TCHAR* p3;
	int fileType;

}FILEOPERATIONINFO, *LPFILEOPERATIONINFO;


// utilities to compensate the native C mismatch >>

inline void copyAppStyleInfo(LPAPPSTYLEINFO s_in_, LPAPPSTYLEINFO s_out_)
{
	s_out_->Background = s_in_->Background;
	s_out_->MenuPopUpColor = s_in_->MenuPopUpColor;
	s_out_->OutlineColor = s_in_->OutlineColor;
	s_out_->SizeWndColor = s_in_->SizeWndColor;
	s_out_->Stylecolor = s_in_->Stylecolor;
	s_out_->StyleID = s_in_->StyleID;
	s_out_->TabColor = s_in_->TabColor;
	s_out_->TextColor = s_in_->TextColor;
	s_out_->ToolbarbuttonBkgnd = s_in_->ToolbarbuttonBkgnd;
	s_out_->specialTextcolor = s_in_->specialTextcolor;
	s_out_->titlebarColor = s_in_->titlebarColor;
	s_out_->mainToolbarColor = s_in_->mainToolbarColor;
}